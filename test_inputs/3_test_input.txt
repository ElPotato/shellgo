TEXT os.(*File).close(SB) gofile..<autogenerated>

  0x133d		0f57c0			XORPS X0, X0		
  0x1340		0f11442410		MOVUPS X0, 0x10(SP)	
  0x1345		488b442408		MOVQ 0x8(SP), AX	
  0x134a		8400			TESTB AL, 0(AX)		
  0x134c		488b00			MOVQ 0(AX), AX		
  0x134f		4889442408		MOVQ AX, 0x8(SP)	
  0x1354		e900000000		JMP 0x1359		[1:5]R_CALL:os.(*file).close	

TEXT %22%22.STDINReader(SB) gofile../Users/mistrz/go/src/github.com/ElPotato/shellgo/shell.go
func STDINReader() []rune {
  0x1373		65488b0c2500000000		MOVQ GS:0, CX		[5:9]R_TLS_LE		
  0x137c		488d842478feffff		LEAQ 0xfffffe78(SP), AX	
  0x1384		483b4110			CMPQ 0x10(CX), AX	
  0x1388		0f863e050000			JBE 0x18cc		
  0x138e		4881ec08020000			SUBQ $0x208, SP		
  0x1395		4889ac2400020000		MOVQ BP, 0x200(SP)	
  0x139d		488dac2400020000		LEAQ 0x200(SP), BP	
  0x13a5		48c784241002000000000000	MOVQ $0x0, 0x210(SP)	
  0x13b1		0f57c9				XORPS X1, X1		
  0x13b4		0f118c2418020000		MOVUPS X1, 0x218(SP)	
	var output []rune
  0x13bc		48c784240801000000000000	MOVQ $0x0, 0x108(SP)	
  0x13c8		0f57c9				XORPS X1, X1		
  0x13cb		0f118c2410010000		MOVUPS X1, 0x110(SP)	
	reader := bufio.NewReader(os.Stdin)
  0x13d3		488b0500000000		MOVQ 0(IP), AX		[3:7]R_PCREL:os.Stdin			
  0x13da		488d0d00000000		LEAQ 0(IP), CX		[3:7]R_PCREL:go.itab.*os.File,io.Reader	
  0x13e1		48898c24e8000000	MOVQ CX, 0xe8(SP)	
  0x13e9		48898424f0000000	MOVQ AX, 0xf0(SP)	
  0x13f1		48898c24b8000000	MOVQ CX, 0xb8(SP)	
  0x13f9		48898424c0000000	MOVQ AX, 0xc0(SP)	
  0x1401		48c744247000000000	MOVQ $0x0, 0x70(SP)	
	return NewReaderSize(rd, defaultBufSize)
  0x140a		488b8424b8000000		MOVQ 0xb8(SP), AX	
  0x1412		488b8c24c0000000		MOVQ 0xc0(SP), CX	
  0x141a		48898424a8000000		MOVQ AX, 0xa8(SP)	
  0x1422		48898c24b0000000		MOVQ CX, 0xb0(SP)	
  0x142a		48c744245000100000		MOVQ $0x1000, 0x50(SP)	
  0x1433		48c744246800000000		MOVQ $0x0, 0x68(SP)	
  0x143c		48c784248800000000000000	MOVQ $0x0, 0x88(SP)	
  0x1448		c644244600			MOVB $0x0, 0x46(SP)	
	b, ok := rd.(*Reader)
  0x144d		48c78424a000000000000000	MOVQ $0x0, 0xa0(SP)	
  0x1459		488b8424b0000000		MOVQ 0xb0(SP), AX	
  0x1461		488b8c24a8000000		MOVQ 0xa8(SP), CX	
  0x1469		488d1500000000			LEAQ 0(IP), DX		[3:7]R_PCREL:go.itab.*bufio.Reader,io.Reader	
  0x1470		4839d1				CMPQ DX, CX		
  0x1473		7405				JE 0x147a		
  0x1475		e949040000			JMP 0x18c3		
  0x147a		b901000000			MOVL $0x1, CX		
  0x147f		eb00				JMP 0x1481		
  0x1481		48898424a0000000		MOVQ AX, 0xa0(SP)	
  0x1489		884c2447			MOVB CL, 0x47(SP)	
  0x148d		488b8424a0000000		MOVQ 0xa0(SP), AX	
  0x1495		4889842488000000		MOVQ AX, 0x88(SP)	
  0x149d		0fb6442447			MOVZX 0x47(SP), AX	
  0x14a2		88442446			MOVB AL, 0x46(SP)	
	if ok && len(b.buf) >= size {
  0x14a6		0fb6442446		MOVZX 0x46(SP), AX	
  0x14ab		88442447		MOVB AL, 0x47(SP)	
  0x14af		84c0			TESTL AL, AL		
  0x14b1		7505			JNE 0x14b8		
  0x14b3		e906040000		JMP 0x18be		
  0x14b8		488b842488000000	MOVQ 0x88(SP), AX	
  0x14c0		8400			TESTB AL, 0(AX)		
  0x14c2		488b4008		MOVQ 0x8(AX), AX	
  0x14c6		4889442460		MOVQ AX, 0x60(SP)	
  0x14cb		4839442450		CMPQ AX, 0x50(SP)	
  0x14d0		0f9e442447		SETLE 0x47(SP)		
  0x14d5		eb00			JMP 0x14d7		
  0x14d7		807c244700		CMPB $0x0, 0x47(SP)	
  0x14dc		7505			JNE 0x14e3		
  0x14de		e9e1010000		JMP 0x16c4		
	return NewReaderSize(rd, defaultBufSize)
  0x14e3		488b842488000000	MOVQ 0x88(SP), AX	
  0x14eb		4889442468		MOVQ AX, 0x68(SP)	
  0x14f0		eb00			JMP 0x14f2		
	reader := bufio.NewReader(os.Stdin)
  0x14f2		488b442468		MOVQ 0x68(SP), AX	
  0x14f7		4889842498000000	MOVQ AX, 0x98(SP)	
  0x14ff		4889442470		MOVQ AX, 0x70(SP)	
  0x1504		eb00			JMP 0x1506		
  0x1506		4889842480000000	MOVQ AX, 0x80(SP)	
	for {
  0x150e		eb00			JMP 0x1510		
  0x1510		eb00			JMP 0x1512		
		input, _, err := reader.ReadRune()
  0x1512		0f57c0			XORPS X0, X0		
  0x1515		0f118424f8000000	MOVUPS X0, 0xf8(SP)	
  0x151d		488b842480000000	MOVQ 0x80(SP), AX	
  0x1525		48890424		MOVQ AX, 0(SP)		
  0x1529		e800000000		CALL 0x152e		[1:5]R_CALL:bufio.(*Reader).ReadRune	
  0x152e		8b442408		MOVL 0x8(SP), AX	
  0x1532		8944244c		MOVL AX, 0x4c(SP)	
  0x1536		488b442418		MOVQ 0x18(SP), AX	
  0x153b		488b4c2420		MOVQ 0x20(SP), CX	
  0x1540		48898424f8000000	MOVQ AX, 0xf8(SP)	
  0x1548		48898c2400010000	MOVQ CX, 0x100(SP)	
  0x1550		8b44244c		MOVL 0x4c(SP), AX	
  0x1554		89442448		MOVL AX, 0x48(SP)	
  0x1558		488b8424f8000000	MOVQ 0xf8(SP), AX	
  0x1560		488b8c2400010000	MOVQ 0x100(SP), CX	
  0x1568		48898424d8000000	MOVQ AX, 0xd8(SP)	
  0x1570		48898c24e0000000	MOVQ CX, 0xe0(SP)	
		if err != nil && err == io.EOF {
  0x1578		4883bc24d800000000	CMPQ $0x0, 0xd8(SP)	
  0x1581		0f95c0			SETNE AL		
  0x1584		88442447		MOVB AL, 0x47(SP)	
  0x1588		7505			JNE 0x158f		
  0x158a		e930010000		JMP 0x16bf		
  0x158f		488b0500000000		MOVQ 0(IP), AX		[3:7]R_PCREL:io.EOF	
  0x1596		48398424d8000000	CMPQ AX, 0xd8(SP)	
  0x159e		0f94c0			SETE AL			
  0x15a1		7405			JE 0x15a8		
  0x15a3		e912010000		JMP 0x16ba		
  0x15a8		488b8424d8000000	MOVQ 0xd8(SP), AX	
  0x15b0		48890424		MOVQ AX, 0(SP)		
  0x15b4		488b8424e0000000	MOVQ 0xe0(SP), AX	
  0x15bc		4889442408		MOVQ AX, 0x8(SP)	
  0x15c1		488b0500000000		MOVQ 0(IP), AX		[3:7]R_PCREL:io.EOF+8	
  0x15c8		4889442410		MOVQ AX, 0x10(SP)	
  0x15cd		e800000000		CALL 0x15d2		[1:5]R_CALL:runtime.ifaceeq	
  0x15d2		0fb6442418		MOVZX 0x18(SP), AX	
  0x15d7		eb00			JMP 0x15d9		
  0x15d9		88442447		MOVB AL, 0x47(SP)	
  0x15dd		eb00			JMP 0x15df		
  0x15df		807c244700		CMPB $0x0, 0x47(SP)	
  0x15e4		7502			JNE 0x15e8		
  0x15e6		eb42			JMP 0x162a		
			break
  0x15e8		eb00			JMP 0x15ea		
	return output
  0x15ea		488b842408010000	MOVQ 0x108(SP), AX	
  0x15f2		488b8c2410010000	MOVQ 0x110(SP), CX	
  0x15fa		488b942418010000	MOVQ 0x118(SP), DX	
  0x1602		4889842410020000	MOVQ AX, 0x210(SP)	
  0x160a		48898c2418020000	MOVQ CX, 0x218(SP)	
  0x1612		4889942420020000	MOVQ DX, 0x220(SP)	
  0x161a		488bac2400020000	MOVQ 0x200(SP), BP	
  0x1622		4881c408020000		ADDQ $0x208, SP		
  0x1629		c3			RET			
		output = append(output, input)
  0x162a		eb00			JMP 0x162c		
  0x162c		488b842408010000	MOVQ 0x108(SP), AX	
  0x1634		488b8c2410010000	MOVQ 0x110(SP), CX	
  0x163c		488b942418010000	MOVQ 0x118(SP), DX	
  0x1644		488d5901		LEAQ 0x1(CX), BX	
  0x1648		4839d3			CMPQ DX, BX		
  0x164b		7602			JBE 0x164f		
  0x164d		eb28			JMP 0x1677		
  0x164f		eb00			JMP 0x1651		
  0x1651		8b742448		MOVL 0x48(SP), SI	
  0x1655		893488			MOVL SI, 0(AX)(CX*4)	
  0x1658		4889842408010000	MOVQ AX, 0x108(SP)	
  0x1660		48899c2410010000	MOVQ BX, 0x110(SP)	
  0x1668		4889942418010000	MOVQ DX, 0x118(SP)	
  0x1670		eb00			JMP 0x1672		
  0x1672		e999feffff		JMP 0x1510		
  0x1677		48894c2458		MOVQ CX, 0x58(SP)	
  0x167c		488d3500000000		LEAQ 0(IP), SI		[3:7]R_PCREL:type.int32	
  0x1683		48893424		MOVQ SI, 0(SP)		
  0x1687		4889442408		MOVQ AX, 0x8(SP)	
  0x168c		48894c2410		MOVQ CX, 0x10(SP)	
  0x1691		4889542418		MOVQ DX, 0x18(SP)	
  0x1696		48895c2420		MOVQ BX, 0x20(SP)	
  0x169b		e800000000		CALL 0x16a0		[1:5]R_CALL:runtime.growslice	
  0x16a0		488b442428		MOVQ 0x28(SP), AX	
  0x16a5		488b4c2430		MOVQ 0x30(SP), CX	
  0x16aa		488b542438		MOVQ 0x38(SP), DX	
  0x16af		488d5901		LEAQ 0x1(CX), BX	
  0x16b3		488b4c2458		MOVQ 0x58(SP), CX	
  0x16b8		eb97			JMP 0x1651		
		if err != nil && err == io.EOF {
  0x16ba		e91affffff		JMP 0x15d9		
  0x16bf		e91bffffff		JMP 0x15df		
	if size < minReadBufferSize {
  0x16c4		eb00			JMP 0x16c6		
  0x16c6		48837c245010		CMPQ $0x10, 0x50(SP)	
const minReadBufferSize = 16
  0x16cc		7c05			JL 0x16d3		
  0x16ce		e9e6010000		JMP 0x18b9		
		size = minReadBufferSize
  0x16d3		48c744245010000000	MOVQ $0x10, 0x50(SP)	
const minReadBufferSize = 16
  0x16dc		eb00			JMP 0x16de		
	return NewReaderSize(rd, defaultBufSize)
  0x16de		48c744247800000000	MOVQ $0x0, 0x78(SP)	
	r := new(Reader)
  0x16e7		48c78424a801000000000000	MOVQ $0x0, 0x1a8(SP)	
  0x16f3		488dbc24b0010000		LEAQ 0x1b0(SP), DI	
  0x16fb		0f57c0				XORPS X0, X0		
  0x16fe		488d7fd0			LEAQ -0x30(DI), DI	
  0x1702		48896c24f0			MOVQ BP, -0x10(SP)	
  0x1707		488d6c24f0			LEAQ -0x10(SP), BP	
  0x170c		e800000000			CALL 0x1711		[1:5]R_CALL:runtime.duffzero+277	
  0x1711		488b6d00			MOVQ 0(BP), BP		
  0x1715		488d8424a8010000		LEAQ 0x1a8(SP), AX	
  0x171d		4889442478			MOVQ AX, 0x78(SP)	
	r.reset(make([]byte, size), rd)
  0x1722		4889842490000000	MOVQ AX, 0x90(SP)	
  0x172a		488d0500000000		LEAQ 0(IP), AX		[3:7]R_PCREL:type.uint8	
  0x1731		48890424		MOVQ AX, 0(SP)		
  0x1735		488b442450		MOVQ 0x50(SP), AX	
  0x173a		4889442408		MOVQ AX, 0x8(SP)	
  0x173f		488b442450		MOVQ 0x50(SP), AX	
  0x1744		4889442410		MOVQ AX, 0x10(SP)	
  0x1749		e800000000		CALL 0x174e		[1:5]R_CALL:runtime.makeslice	
  0x174e		488b442418		MOVQ 0x18(SP), AX	
  0x1753		488b4c2450		MOVQ 0x50(SP), CX	
  0x1758		488b542450		MOVQ 0x50(SP), DX	
  0x175d		4889842438010000	MOVQ AX, 0x138(SP)	
  0x1765		48898c2440010000	MOVQ CX, 0x140(SP)	
  0x176d		4889942448010000	MOVQ DX, 0x148(SP)	
  0x1775		4889842420010000	MOVQ AX, 0x120(SP)	
  0x177d		48898c2428010000	MOVQ CX, 0x128(SP)	
  0x1785		4889942430010000	MOVQ DX, 0x130(SP)	
  0x178d		488b8424a8000000	MOVQ 0xa8(SP), AX	
  0x1795		488b8c24b0000000	MOVQ 0xb0(SP), CX	
  0x179d		48898424c8000000	MOVQ AX, 0xc8(SP)	
  0x17a5		48898c24d0000000	MOVQ CX, 0xd0(SP)	
	*b = Reader{
  0x17ad		48c784245001000000000000	MOVQ $0x0, 0x150(SP)	
  0x17b9		488dbc2458010000		LEAQ 0x158(SP), DI	
  0x17c1		0f57c0				XORPS X0, X0		
  0x17c4		488d7fd0			LEAQ -0x30(DI), DI	
  0x17c8		48896c24f0			MOVQ BP, -0x10(SP)	
  0x17cd		488d6c24f0			LEAQ -0x10(SP), BP	
  0x17d2		e800000000			CALL 0x17d7		[1:5]R_CALL:runtime.duffzero+277	
  0x17d7		488b6d00			MOVQ 0(BP), BP		
  0x17db		488b842420010000		MOVQ 0x120(SP), AX	
  0x17e3		488b8c2428010000		MOVQ 0x128(SP), CX	
  0x17eb		488b942430010000		MOVQ 0x130(SP), DX	
  0x17f3		4889842450010000		MOVQ AX, 0x150(SP)	
  0x17fb		48898c2458010000		MOVQ CX, 0x158(SP)	
  0x1803		4889942460010000		MOVQ DX, 0x160(SP)	
  0x180b		488b8424c8000000		MOVQ 0xc8(SP), AX	
  0x1813		488b8c24d0000000		MOVQ 0xd0(SP), CX	
  0x181b		4889842468010000		MOVQ AX, 0x168(SP)	
  0x1823		48898c2470010000		MOVQ CX, 0x170(SP)	
  0x182b		48c7842498010000ffffffff	MOVQ $-0x1, 0x198(SP)	
  0x1837		48c78424a0010000ffffffff	MOVQ $-0x1, 0x1a0(SP)	
  0x1843		488b842490000000		MOVQ 0x90(SP), AX	
  0x184b		8400				TESTB AL, 0(AX)		
  0x184d		833d0000000000			CMPL $0x0, 0(IP)	[2:6]R_PCREL:runtime.writeBarrier+-1	
  0x1854		7402				JE 0x1858		
  0x1856		eb3d				JMP 0x1895		
  0x1858		488b8c2450010000		MOVQ 0x150(SP), CX	
  0x1860		488908				MOVQ CX, 0(AX)		
  0x1863		488d7808			LEAQ 0x8(AX), DI	
  0x1867		488db42458010000		LEAQ 0x158(SP), SI	
  0x186f		48896c24f0			MOVQ BP, -0x10(SP)	
  0x1874		488d6c24f0			LEAQ -0x10(SP), BP	
  0x1879		e800000000			CALL 0x187e		[1:5]R_CALL:runtime.duffcopy+826	
  0x187e		488b6d00			MOVQ 0(BP), BP		
  0x1882		eb00				JMP 0x1884		
	r.reset(make([]byte, size), rd)
  0x1884		eb00			JMP 0x1886		
	return NewReaderSize(rd, defaultBufSize)
  0x1886		488b442478		MOVQ 0x78(SP), AX	
  0x188b		4889442468		MOVQ AX, 0x68(SP)	
  0x1890		e95dfcffff		JMP 0x14f2		
	*b = Reader{
  0x1895		488d0d00000000		LEAQ 0(IP), CX		[3:7]R_PCREL:type.bufio.Reader	
  0x189c		48890c24		MOVQ CX, 0(SP)		
  0x18a0		4889442408		MOVQ AX, 0x8(SP)	
  0x18a5		488d842450010000	LEAQ 0x150(SP), AX	
  0x18ad		4889442410		MOVQ AX, 0x10(SP)	
  0x18b2		e800000000		CALL 0x18b7		[1:5]R_CALL:runtime.typedmemmove	
  0x18b7		ebcb			JMP 0x1884		
const minReadBufferSize = 16
  0x18b9		e920feffff		JMP 0x16de		
	if ok && len(b.buf) >= size {
  0x18be		e914fcffff		JMP 0x14d7		
  0x18c3		31c0			XORL AX, AX		
  0x18c5		31c9			XORL CX, CX		
	b, ok := rd.(*Reader)
  0x18c7		e9b5fbffff		JMP 0x1481		
func STDINReader() []rune {
  0x18cc		e800000000		CALL 0x18d1			[1:5]R_CALL:runtime.morestack_noctxt	
  0x18d1		e99dfaffff		JMP %22%22.STDINReader(SB)	

TEXT %22%22.Parse(SB) gofile../Users/mistrz/go/src/github.com/ElPotato/shellgo/shell.go
func Parse(input string) string {
  0x1a56		65488b0c2500000000	MOVQ GS:0, CX		[5:9]R_TLS_LE		
  0x1a5f		488d8424f0feffff	LEAQ 0xfffffef0(SP), AX	
  0x1a67		483b4110		CMPQ 0x10(CX), AX	
  0x1a6b		0f86cc030000		JBE 0x1e3d		
  0x1a71		4881ec90010000		SUBQ $0x190, SP		
  0x1a78		4889ac2488010000	MOVQ BP, 0x188(SP)	
  0x1a80		488dac2488010000	LEAQ 0x188(SP), BP	
  0x1a88		0f57c0			XORPS X0, X0		
  0x1a8b		0f118424a8010000	MOVUPS X0, 0x1a8(SP)	
	var buffer bytes.Buffer
  0x1a93		48c784246001000000000000	MOVQ $0x0, 0x160(SP)	
  0x1a9f		0f57c0				XORPS X0, X0		
  0x1aa2		0f11842468010000		MOVUPS X0, 0x168(SP)	
  0x1aaa		0f57c0				XORPS X0, X0		
  0x1aad		0f11842478010000		MOVUPS X0, 0x178(SP)	
	r, _ := regexp.Compile("\t[0-9a-f]+")
  0x1ab5		488d0500000000			LEAQ 0(IP), AX		[3:7]R_PCREL:go.string."\t[0-9a-f]+"	
  0x1abc		48898424a8000000		MOVQ AX, 0xa8(SP)	
  0x1ac4		48c78424b00000000a000000	MOVQ $0xa, 0xb0(SP)	
  0x1ad0		48c744245000000000		MOVQ $0x0, 0x50(SP)	
  0x1ad9		0f57c0				XORPS X0, X0		
  0x1adc		0f11842488000000		MOVUPS X0, 0x88(SP)	
  0x1ae4		48c744246800000000		MOVQ $0x0, 0x68(SP)	
  0x1aed		0f57c0				XORPS X0, X0		
  0x1af0		0f118424c8000000		MOVUPS X0, 0xc8(SP)	
	return compile(expr, syntax.Perl, false)
  0x1af8		48c784248000000000000000	MOVQ $0x0, 0x80(SP)	
  0x1b04		0f57c0				XORPS X0, X0		
  0x1b07		0f11842408010000		MOVUPS X0, 0x108(SP)	
  0x1b0f		488b8424a8000000		MOVQ 0xa8(SP), AX	
  0x1b17		488b8c24b0000000		MOVQ 0xb0(SP), CX	
  0x1b1f		48890424			MOVQ AX, 0(SP)		
  0x1b23		48894c2408			MOVQ CX, 0x8(SP)	
  0x1b28		66c7442410d400			MOVW $0xd4, 0x10(SP)	
  0x1b2f		c644241200			MOVB $0x0, 0x12(SP)	
  0x1b34		e800000000			CALL 0x1b39		[1:5]R_CALL:regexp.compile	
  0x1b39		488b442418			MOVQ 0x18(SP), AX	
  0x1b3e		4889842480000000		MOVQ AX, 0x80(SP)	
  0x1b46		488b442428			MOVQ 0x28(SP), AX	
  0x1b4b		488b4c2420			MOVQ 0x20(SP), CX	
  0x1b50		48898c2408010000		MOVQ CX, 0x108(SP)	
  0x1b58		4889842410010000		MOVQ AX, 0x110(SP)	
  0x1b60		488b842480000000		MOVQ 0x80(SP), AX	
  0x1b68		4889442468			MOVQ AX, 0x68(SP)	
  0x1b6d		488b842410010000		MOVQ 0x110(SP), AX	
  0x1b75		488b8c2408010000		MOVQ 0x108(SP), CX	
  0x1b7d		48898c24c8000000		MOVQ CX, 0xc8(SP)	
  0x1b85		48898424d0000000		MOVQ AX, 0xd0(SP)	
	r, _ := regexp.Compile("\t[0-9a-f]+")
  0x1b8d		488b442468		MOVQ 0x68(SP), AX	
  0x1b92		4889442450		MOVQ AX, 0x50(SP)	
  0x1b97		488b8424d0000000	MOVQ 0xd0(SP), AX	
  0x1b9f		488b8c24c8000000	MOVQ 0xc8(SP), CX	
  0x1ba7		48898c2488000000	MOVQ CX, 0x88(SP)	
  0x1baf		4889842490000000	MOVQ AX, 0x90(SP)	
  0x1bb7		eb00			JMP 0x1bb9		
  0x1bb9		488b442450		MOVQ 0x50(SP), AX	
  0x1bbe		4889442478		MOVQ AX, 0x78(SP)	
  0x1bc3		4889442458		MOVQ AX, 0x58(SP)	
	matched := r.FindAllString(input, -1)
  0x1bc8		48890424		MOVQ AX, 0(SP)		
  0x1bcc		488b8424a0010000	MOVQ 0x1a0(SP), AX	
  0x1bd4		488b8c2498010000	MOVQ 0x198(SP), CX	
  0x1bdc		48894c2408		MOVQ CX, 0x8(SP)	
  0x1be1		4889442410		MOVQ AX, 0x10(SP)	
  0x1be6		48c7442418ffffffff	MOVQ $-0x1, 0x18(SP)	
  0x1bef		e800000000		CALL 0x1bf4		[1:5]R_CALL:regexp.(*Regexp).FindAllString	
  0x1bf4		488b442428		MOVQ 0x28(SP), AX	
  0x1bf9		488b4c2420		MOVQ 0x20(SP), CX	
  0x1bfe		488b542430		MOVQ 0x30(SP), DX	
  0x1c03		48898c2418010000	MOVQ CX, 0x118(SP)	
  0x1c0b		4889842420010000	MOVQ AX, 0x120(SP)	
  0x1c13		4889942428010000	MOVQ DX, 0x128(SP)	
	for _, e := range matched {
  0x1c1b		48898c2448010000	MOVQ CX, 0x148(SP)	
  0x1c23		4889842450010000	MOVQ AX, 0x150(SP)	
  0x1c2b		4889942458010000	MOVQ DX, 0x158(SP)	
  0x1c33		48c744244000000000	MOVQ $0x0, 0x40(SP)	
  0x1c3c		488b842450010000	MOVQ 0x150(SP), AX	
  0x1c44		4889442438		MOVQ AX, 0x38(SP)	
  0x1c49		488b842448010000	MOVQ 0x148(SP), AX	
  0x1c51		4889442470		MOVQ AX, 0x70(SP)	
  0x1c56		488b442438		MOVQ 0x38(SP), AX	
  0x1c5b		4839442440		CMPQ AX, 0x40(SP)	
  0x1c60		7c05			JL 0x1c67		
  0x1c62		e9cb010000		JMP 0x1e32		
  0x1c67		eb00			JMP 0x1c69		
  0x1c69		488b442470		MOVQ 0x70(SP), AX	
  0x1c6e		8400			TESTB AL, 0(AX)		
  0x1c70		488b08			MOVQ 0(AX), CX		
  0x1c73		488b4008		MOVQ 0x8(AX), AX	
  0x1c77		48898c24e8000000	MOVQ CX, 0xe8(SP)	
  0x1c7f		48898424f0000000	MOVQ AX, 0xf0(SP)	
  0x1c87		48898c24b8000000	MOVQ CX, 0xb8(SP)	
  0x1c8f		48898424c0000000	MOVQ AX, 0xc0(SP)	
		buffer.WriteString(strings.Trim(e, "\t"))
  0x1c97		48890c24		MOVQ CX, 0(SP)		
  0x1c9b		4889442408		MOVQ AX, 0x8(SP)	
  0x1ca0		488d0500000000		LEAQ 0(IP), AX		[3:7]R_PCREL:go.string."\t"	
  0x1ca7		4889442410		MOVQ AX, 0x10(SP)	
  0x1cac		48c744241801000000	MOVQ $0x1, 0x18(SP)	
  0x1cb5		e800000000		CALL 0x1cba		[1:5]R_CALL:strings.Trim	
  0x1cba		488b442420		MOVQ 0x20(SP), AX	
  0x1cbf		488b4c2428		MOVQ 0x28(SP), CX	
  0x1cc4		48898424f8000000	MOVQ AX, 0xf8(SP)	
  0x1ccc		48898c2400010000	MOVQ CX, 0x100(SP)	
  0x1cd4		488d942460010000	LEAQ 0x160(SP), DX	
  0x1cdc		48891424		MOVQ DX, 0(SP)		
  0x1ce0		4889442408		MOVQ AX, 0x8(SP)	
  0x1ce5		48894c2410		MOVQ CX, 0x10(SP)	
  0x1cea		e800000000		CALL 0x1cef		[1:5]R_CALL:bytes.(*Buffer).WriteString	
  0x1cef		eb00			JMP 0x1cf1		
	for _, e := range matched {
  0x1cf1		488b542440		MOVQ 0x40(SP), DX	
  0x1cf6		48ffc2			INCQ DX			
  0x1cf9		4889542440		MOVQ DX, 0x40(SP)	
  0x1cfe		4839542438		CMPQ DX, 0x38(SP)	
  0x1d03		7f02			JG 0x1d07		
  0x1d05		eb13			JMP 0x1d1a		
  0x1d07		488b442470		MOVQ 0x70(SP), AX	
  0x1d0c		4883c010		ADDQ $0x10, AX		
  0x1d10		4889442470		MOVQ AX, 0x70(SP)	
  0x1d15		e94fffffff		JMP 0x1c69		
	return buffer.String()
  0x1d1a		eb00			JMP 0x1d1c		
  0x1d1c		488d942460010000	LEAQ 0x160(SP), DX	
  0x1d24		4889542460		MOVQ DX, 0x60(SP)	
  0x1d29		0f57c0			XORPS X0, X0		
  0x1d2c		0f11842498000000	MOVUPS X0, 0x98(SP)	
	if b == nil {
  0x1d34		48837c246000		CMPQ $0x0, 0x60(SP)	
  0x1d3a		7505			JNE 0x1d41		
  0x1d3c		e9d4000000		JMP 0x1e15		
	return string(b.buf[b.off:])
  0x1d41		488b542460		MOVQ 0x60(SP), DX	
  0x1d46		8402			TESTB AL, 0(DX)		
  0x1d48		488b4218		MOVQ 0x18(DX), AX	
  0x1d4c		4889442448		MOVQ AX, 0x48(SP)	
  0x1d51		488b542460		MOVQ 0x60(SP), DX	
  0x1d56		8402			TESTB AL, 0(DX)		
  0x1d58		488b1a			MOVQ 0(DX), BX		
  0x1d5b		488b4a08		MOVQ 0x8(DX), CX	
  0x1d5f		488b5210		MOVQ 0x10(DX), DX	
  0x1d63		eb00			JMP 0x1d65		
  0x1d65		4839c8			CMPQ CX, AX		
  0x1d68		7605			JBE 0x1d6f		
  0x1d6a		e9c8000000		JMP 0x1e37		
  0x1d6f		4829c2			SUBQ AX, DX		
  0x1d72		4889d6			MOVQ DX, SI		
  0x1d75		48f7da			NEGQ DX			
  0x1d78		48c1fa3f		SARQ $0x3f, DX		
  0x1d7c		4821c2			ANDQ AX, DX		
  0x1d7f		4801da			ADDQ BX, DX		
  0x1d82		4889942430010000	MOVQ DX, 0x130(SP)	
  0x1d8a		4829c1			SUBQ AX, CX		
  0x1d8d		48898c2438010000	MOVQ CX, 0x138(SP)	
  0x1d95		4889b42440010000	MOVQ SI, 0x140(SP)	
  0x1d9d		48c7042400000000	MOVQ $0x0, 0(SP)	
  0x1da5		4889542408		MOVQ DX, 0x8(SP)	
  0x1daa		48894c2410		MOVQ CX, 0x10(SP)	
  0x1daf		4889742418		MOVQ SI, 0x18(SP)	
  0x1db4		e800000000		CALL 0x1db9		[1:5]R_CALL:runtime.slicebytetostring	
  0x1db9		488b442420		MOVQ 0x20(SP), AX	
  0x1dbe		488b4c2428		MOVQ 0x28(SP), CX	
	return buffer.String()
  0x1dc3		48898424d8000000		MOVQ AX, 0xd8(SP)	
  0x1dcb		48898c24e0000000		MOVQ CX, 0xe0(SP)	
  0x1dd3		4889842498000000		MOVQ AX, 0x98(SP)	
  0x1ddb		48898c24a0000000		MOVQ CX, 0xa0(SP)	
  0x1de3		eb00				JMP 0x1de5		
  0x1de5		488b842498000000		MOVQ 0x98(SP), AX	
  0x1ded		488b8c24a0000000		MOVQ 0xa0(SP), CX	
  0x1df5		48898424a8010000		MOVQ AX, 0x1a8(SP)	
  0x1dfd		48898c24b0010000		MOVQ CX, 0x1b0(SP)	
  0x1e05		488bac2488010000		MOVQ 0x188(SP), BP	
  0x1e0d		4881c490010000			ADDQ $0x190, SP		
  0x1e14		c3				RET			
  0x1e15		488d0500000000			LEAQ 0(IP), AX		[3:7]R_PCREL:go.string."<nil>"	
  0x1e1c		4889842498000000		MOVQ AX, 0x98(SP)	
  0x1e24		48c78424a000000005000000	MOVQ $0x5, 0xa0(SP)	
  0x1e30		ebb3				JMP 0x1de5		
	for _, e := range matched {
  0x1e32		e9e5feffff		JMP 0x1d1c		
	return string(b.buf[b.off:])
  0x1e37		e800000000		CALL 0x1e3c		[1:5]R_CALL:runtime.panicSliceB	
  0x1e3c		90			NOPL			
func Parse(input string) string {
  0x1e3d		e800000000		CALL 0x1e42		[1:5]R_CALL:runtime.morestack_noctxt	
  0x1e42		e90ffcffff		JMP %22%22.Parse(SB)	
